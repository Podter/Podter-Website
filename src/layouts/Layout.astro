---
import "@/styles/global.scss";
import "@carrot-kpi/switzer-font/latin.css";
import "@fontsource-variable/jetbrains-mono";

import { SEO } from "astro-seo";
import { ViewTransitions } from "astro:transitions";
import { getCollection } from "astro:content";
import { siteConfig } from "@/constants/site";
import { slide } from "@/constants/animation";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Cmdk, { type Post } from "@/components/Cmdk";
import { TypographyH1, TypographyP } from "@/components/ui/typography";

interface Props {
  title: string;
  description?: string;
  displayTitle?: boolean;
  displayDescription?: boolean;
}

const posts: Post[] = (await getCollection("blog"))
  .sort((a, b) => a.data.date.valueOf() - b.data.date.valueOf())
  .map((post) => ({
    title: post.data.title,
    href: "/blog/" + post.slug,
  }));

const {
  title,
  description,
  displayTitle = true,
  displayDescription = true,
} = Astro.props;

const ogImage =
  title !== "Podter"
    ? `${siteConfig.ogApi}?title=${title}`
    : siteConfig.ogImage;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <SEO
      title={title !== "Podter" ? title : undefined}
      titleTemplate={`%s | ${siteConfig.name}`}
      titleDefault={siteConfig.name}
      description={description ?? siteConfig.description}
      charset="UTF-8"
      openGraph={{
        basic: {
          title,
          url: siteConfig.url,
          type: "website",
          image: ogImage,
        },
        image: {
          url: ogImage,
          width: 1920,
          height: 1080,
          alt: title,
        },
        optional: {
          description: description ?? siteConfig.description,
          locale: "en-US",
          siteName: siteConfig.name,
        },
      }}
      twitter={{
        card: "summary_large_image",
        title,
        description: description ?? siteConfig.description,
        image: ogImage,
        imageAlt: title,
        creator: siteConfig.twitter,
      }}
      extend={{
        link: [
          {
            rel: "icon",
            type: "image/svg+xml",
            href: "/favicon.svg",
          },
          {
            rel: "sitemap",
            href: "/sitemap-index.xml",
          },
          {
            rel: "author",
            href: siteConfig.url,
          },
        ],
        meta: [
          { name: "viewport", content: "width=device-width" },
          { name: "generator", content: Astro.generator },
          {
            name: "theme-color",
            media: "(prefers-color-scheme: light)",
            content: "white",
          },
          {
            name: "theme-color",
            media: "(prefers-color-scheme: dark)",
            content: "black",
          },
          { name: "author", content: siteConfig.username },
          { name: "creator", content: siteConfig.username },
          { name: "darkreader-lock", content: "true" },
          {
            name: "googlebot",
            content:
              "index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1",
          },
          {
            name: "google-site-verification",
            content: "Jfc2vKkk95YzKNp4NaKjW08FQd11KPabjnJucKPeKVc",
          },
        ],
      }}
    />
    <script src="@/lib/themeHandler.ts"></script>
    <ViewTransitions />
  </head>
  <body>
    <div class="mx-auto max-w-2xl p-4 md:p-8">
      <Header transition:persist />
      <main transition:animate={slide}>
        {displayTitle && <TypographyH1>{title}</TypographyH1>}
        {
          displayDescription && (
            <TypographyP className="!mt-3">{description}</TypographyP>
          )
        }
        <slot />
      </main>
      <Footer transition:persist />
    </div>
    <Cmdk transition:persist client:media="(min-width: 640px)" posts={posts} />
  </body>
</html>
